/*
vim: syntax=groovy
-*- mode: groovy;-*-
*/

manifest {
  name = 'panann'
  description = 'Predict genes for a population of genomes.'
  homePage = 'https://github.com/darcyabjones/panann'
  author = 'Darcy Jones'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.31.1'
  version = "v0.0.1"
}


// Default command line parameters
params {
  help = false
  tracedir = "trace"
  outdir = "results"

  // Target genomes to annotate as softmasked fasta files.
  // Note the file basename (filename up to but excluding the
  // last extension) is used to match genomes with other hints.
  genomes = false

  //
  // A tsv file indicating the locations of precomputed results.
  // The format is like this.
  // # name	analysis	file	[optional]strand	[optional]read_group
  //test	remote	file.gff3
  //test	augutus_hints	sss
  //test	stringtie	blah.gtf

  /*
  valid analysis: known,fastq_forward,fastq_reverse,gmap,spaln_transcripts,spaln_proteins,exonerate,cram,stringtie,augustus_intron_hints,genemark,pasa,codingquarry,codingquarrypm,gemoma_intron_hints,gemoma_forward_coverage,gemoma_reverse_coverage,gemoma,augustus,gemoma_comparative,evm,augustus_gapfiller,
   */
  table = false

  // A glob of transcripts fasta files to map to the genomes.
  // E.g. from prior trininty assembly.
  transcripts = false

  // A glob of protein fasta files from closely related organisms to align
  // to genomes and use as hints.
  proteins = false

  // A single fasta file of many proteins from diverse taxonomic sources
  // (E.g. uniref90). Used as weaker hints than proteins from more closely
  // related organisms.
  remote_proteins = false

  // The busco lineage to use to evaluate gene prediction completeness.
  // If this is not provided, busco will not be run.
  busco_lineage = false

  // Flag to run busco on the genomes as well as checking the protein completeness.
  // This takes considerably more time but might allow you to compare with protein
  // completeness.
  busco_genomes = false

  // Augustus params
  // The folder containing trained models for augustus [required].
  augustus_config = false
  // The species to use within the augustus_config [required].
  augustus_species = false

  // Run augustus denovo against all genomes.
  // The denovo predictions don't form part of the output, this is only
  // used to evaluate the performance of the augustus models.
  augustus_denovo = false

  // Run all augustus prediction methods with UTR prediction.
  // Note that final combining prediction steps are always run
  // with UTR predictions so augustus MUST be trained to use UTRs.
  // Use this if the UTR model performs better than the non-UTR model.
  augustus_utr = false

  // The weighting config file for running augustus with hints.
  augustus_hint_weights = "data/extrinsic_hints.cfg"

  // The weighting config file for combining annotations from
  // multiple sources.
  augustus_gapfiller_weights = "data/extrinsic_gapfiller.cfg"

  // The config file for evidence modeller
  evm_config = "data/evm.cfg"

  min_contig_length = 500

  // RNAseq params

  // RNAseq is FR stranded rather than RF
  // (typical Illumina stranded configuration).
  // This can be overwritten for individual fastq pairs or crams
  // by adding a "strand" column specifying "fr" or "rf".
  // This parameter sets a default for when that column is unspecified.

  // GTTG and GAAG might also be valid.
  // https://www.biorxiv.org/content/10.1101/616565v1.full
  valid_splicesites = "gtag,gcag,atac,ctac"
  min_intron_soft = 20
  min_intron_hard = 5
  max_intron_hard = 15000
  star_novel_params = "--outSJfilterReads Unique " +
       "--outSJfilterOverhangMin 30 12 12 12 " +
       "--outSJfilterCountUniqueMin 10 5 5 5 " +
       "--outSJfilterDistToOtherSJmin 10 0 5 5 " +
       "--outSJfilterIntronMaxVsReadN 10 100 500 1000 5000 10000"
  star_align_params = "--outSJfilterReads All " +
       "--outSJfilterCountUniqueMin 20 10 10 10 " +
       "--outSJfilterIntronMaxVsReadN 10 15 20 30 50 100 500 1000"
  max_gene_hard = 20000

  spaln_species = "phaenodo"

  trans_table = 1


  // Misc parameters.

  // Don't use parameters that are optimised for eukaryotes with
  // high-gene density.
  notfungus = false

  // Run GeneMark. This must be explicitly specified because GeneMark requires a license.
  genemark = false

  // Use signalp5 rather than deepsig to train CodingQuarryPM models.
  // This is not the default as signalp requires a license.
  signalp = false

  // Don't run trinity even if fastq files are provided.
  // Useful if you have precomputed transcripts but not cram files.
  notrinity = false

  // Don't run STAR mapping even if fastq files are provided.
  // Useful if you have precomputed cram files but not transcripts.
  nostar = false

  // Don't run codingquarry pathogen mode.
  // Use if you're not working with genomes unlikely to have tricky-to-predict
  // secreted genes, or if you don't have enough memory to run pathogen mode.
  // Note, cqpm is also not run if the `--notfungus` option is used.
  nocqpm = false

  // Specify that we are running a training set to optimise the hints parameters.
  // Should be the name of the "genome" that contains the training set.
  training = false

  pasa = false

  antifam_url = "ftp://ftp.ebi.ac.uk/pub/databases/Pfam/AntiFam/current/Antifam.tar.gz"
  antifam = false
}

includeConfig "conf/base.config"
process.container = "darcyabjones/${manifest.name}:${manifest.name}-${manifest.version}"

profiles {
  nimbus {
    includeConfig "conf/nimbus.config"
  }
  pawsey_zeus {
    process.module = "singularity/3.5.2"
    includeConfig "conf/pawsey_zeus.config"
  }
  docker {
    docker.enabled = true
  }
  docker_sudo {
    docker.enabled = true
    docker.sudo = true
  }
  docker_indiv {
    includeConfig "conf/docker.config"
  }
  singularity {
    singularity.enabled = true
  }
  singularity_indiv {
    includeConfig "conf/singularity_indiv.config"
  }
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']
process.errorStrategy = 'finish'

timeline {
  enabled = true
  file = "${params.outdir}/${params.tracedir}/qcflow_timeline.html"
}

report {
  enabled = true
  file = "${params.outdir}/${params.tracedir}/qcflow_report.html"
}

trace {
  enabled = true
  file = "${params.outdir}/${params.tracedir}/qcflow_trace.txt"
}
