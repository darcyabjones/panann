Bootstrap: docker
From: debian:stretch-20190228-slim
Stage: init

%post
    mkdir /build

    cat <<'EOF' > /build/init.sh
        export BUILD_DIR="/build"
        export ENV_FILE="${BUILD_DIR}/env.sh"

        # Adds an environment variable to singularity env.
        add_env () {
          for arg in $@; do
            eval echo "export ${arg}=\"\${${arg}}\"" >> ${SINGULARITY_ENVIRONMENT}
            eval echo "export ${arg}=\"\${${arg}}\"" >> ${ENV_FILE}
          done
        }

        # Adds a path to the environment, without overwriting it.
        prepend_path () {
          eval echo "export ${1}=\"${2}:\\\${${1}}\"" >> ${SINGULARITY_ENVIRONMENT}
          eval echo "export ${1}=\"${2}:\\\${${1}}\"" >> ${ENV_FILE}
          eval export ${1}="${2}:\${${1}}"
        }

        NCPU="$(grep -c ^processor /proc/cpuinfo)"

        # Set these with empty defaults to avoid using unset variables in path adds
        export PATH="${PATH-}"
        export INCLUDE="${INCLUDE-}"
        export CPATH="${CPATH-}"
        export LIBRARY_PATH="${LIBRARY_PATH-}"
        export LD_LIBRARY_PATH="${LD_LIBRARY_PATH-}"
        export LD_RUN_PATH="${LD_RUN_PATH-}"

        # We will build everything in here
        mkdir -p "${BUILD_DIR}"
EOF


Bootstrap: docker
From: debian:stretch-20190228-slim
Stage: jellyfish_builder

%files from init
    /build/init.sh

%post
    set -eux

    . /build/init.sh

    export JELLYFISH_VERSION="2.2.10"
    export JELLYFISH_PREFIX="/opt/jellyfish/${JELLYFISH_VERSION}"
    export JELLYFISH_URL="https://github.com/gmarcais/Jellyfish/releases/download/v${JELLYFISH_VERSION}/jellyfish-${JELLYFISH_VERSION}.tar.gz"

    add_env JELLYFISH_PREFIX JELLYFISH_VERSION
    prepend_path PATH "${JELLYFISH_PREFIX}/bin"
    prepend_path INCLUDE "${JELLYFISH_PREFIX}/include"
    prepend_path CPATH "${JELLYFISH_PREFIX}/include"
    prepend_path LIBRARY_PATH "${JELLYFISH_PREFIX}/lib"
    prepend_path LD_LIBRARY_PATH "${JELLYFISH_PREFIX}/lib"
    prepend_path LD_RUN_PATH "${JELLYFISH_PREFIX}/lib"

    # TODO figure out if swig bindings necessary for any tools depending
    # on jellyfish.

    apt-get update
    apt-get install -y \
      build-essential \
      wget

    rm -rf /var/lib/apt/lists/*

    cd /build
    wget ${JELLYFISH_URL}
    tar zxf jellyfish*.tar.gz
    rm jellyfish*.tar.gz
    cd jellyfish*/
    ./configure --prefix=${JELLYFISH_PREFIX}
    make
    make install


Bootstrap: docker
From: debian:stretch-20190228-slim
Stage: htslib_builder

%files from init
    /build/init.sh

%post
    set -eux

    . /build/init.sh

    HTSLIB_VERSION="1.9"
    HTSLIB_PREFIX="/opt/htslib/${HTSLIB_VERSION}"
    HTSLIB_REPO="https://github.com/samtools/htslib.git"

    SAMTOOLS_VERSION="1.9"
    SAMTOOLS_PREFIX="/opt/samtools/${SAMTOOLS_VERSION}"
    SAMTOOLS_REPO="https://github.com/samtools/samtools.git"

    add_env HTSLIB_PREFIX HTSLIB_VERSION
    add_env SAMTOOLS_PREFIX SAMTOOLS_VERSION

    prepend_path PATH "${SAMTOOLS_PREFIX}/bin:${HTSLIB_PREFIX}/bin"
    prepend_path CPATH "${HTSLIB_PREFIX}/include"
    prepend_path LIBRARY_PATH "${HTSLIB_PREFIX}/lib"
    prepend_path LD_LIBRARY_PATH "${HTSLIB_PREFIX}/lib"


    apt-get update
    apt-get install -y \
      autoconf \
      build-essential \
      git \
      libbz2-dev \
      libcurl4-openssl-dev \
      liblzma-dev \
      libncurses5-dev \
      zlib1g-dev

    # Runtime libraries given by
    # libbz2-1.0 \
    # libcurl3 \
    # libncurses5
    # lzma \
    # zlib1g

    rm -rf /var/lib/apt/lists/*


    cd "${BUILD_DIR}"
    git clone "${HTSLIB_REPO}" htslib && cd htslib
    git fetch --tags
    git checkout "${HTSLIB_VERSION}"
    autoheader
    autoconf
    ./configure --prefix="${HTSLIB_PREFIX}" --enable-libcurl
    make -j "${NCPU}"
    make -j "${NCPU}" install


    cd "${BUILD_DIR}"
    git clone "${SAMTOOLS_REPO}" samtools && cd samtools
    git fetch --tags
    git checkout "${SAMTOOLS_VERSION}"
    autoheader
    autoconf

    ./configure \
      --prefix="${SAMTOOLS_PREFIX}" \
      --with-htslib="${HTSLIB_PREFIX}"

    make -j "${NCPU}"
    make -j "${NCPU}" install


Bootstrap: docker
From: debian:stretch-20190228-slim
Stage: bowtie2_builder

%files from init
    /build/init.sh

%post
    set -eux

    . /build/init.sh

    export BOWTIE2_VERSION="v2.3.5.1"
    export BOWTIE2_PREFIX="/opt/bowtie2/${BOWTIE2_VERSION}"
    export BOWTIE2_URL="https://github.com/BenLangmead/bowtie2.git"

    add_env BOWTIE2_VERSION BOWTIE2_PREFIX
    prepend_path PATH "${BOWTIE2_PREFIX}/bin"

    apt-get update
    apt-get install -y \
      build-essential \
      libtbb-dev \
      git \
      zlib1g-dev

    # Runtime
    #  libtbb2
    #  zlib1g
    #  Perl - needs locales set
    #  Python2

    rm -rf /var/lib/apt/lists/*

    cd /build
    git clone "${BOWTIE2_URL}" bowtie2
    cd bowtie2
    git fetch --tags
    git checkout "tags/${BOWTIE2_VERSION}"
    make

    mkdir -p "${BOWTIE2_PREFIX}"
    mkdir -p "${BOWTIE2_PREFIX}/bin"
    find . -maxdepth 1 -type f -executable -exec mv {} "${BOWTIE2_PREFIX}/bin" \;


Bootstrap: docker
From: debian:stretch-20190228-slim
Stage: salmon_builder

%files from init
    /build/init.sh

%post
    set -eux

    . /build/init.sh

    export SALMON_VERSION="v0.13.1"
    export SALMON_PREFIX="/opt/salmon/${SALMON_VERSION}"
    export SALMON_URL="https://github.com/COMBINE-lab/salmon.git"

    add_env SALMON_PREFIX SALMON_VERSION
    prepend_path PATH "${SALMON_PREFIX}/bin"
    prepend_path LD_LIBRARY_PATH "${SALMON_PREFIX}/lib"

    echo "deb http://deb.debian.org/debian stretch-backports main" >> /etc/apt/sources.list

    apt-get update
    apt-get install -y \
      autoconf \
      build-essential \
      curl \
      git \
      libbz2-dev \
      libboost-all-dev \
      liblzma-dev \
      libtbb-dev \
      unzip \
      zlib1g-dev

    apt-get -t stretch-backports install -y cmake

    # Runtime requires
    #  libtbb2
    #  libbz2-1.0
    #  zlib1g
    #  liblzma5

    rm -rf /var/lib/apt/lists/*

    cd /build
    git clone "${SALMON_URL}" salmon
    cd salmon
    git fetch --tags
    git checkout "tags/${SALMON_VERSION}"

    mkdir -p build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX="${SALMON_PREFIX}" ..
    make
    make install
    make test


Bootstrap: docker
From: debian:stretch-20190228-slim
Stage: trinity_builder

%files from init
    /build/init.sh

%post
    set -eux

    . /build/init.sh

    export TRINITY_VERSION="Trinity-v2.8.4"
    export TRINITY_PREFIX="/opt/trinity/${TRINITY_VERSION}"
    export TRINITY_URL="https://github.com/trinityrnaseq/trinityrnaseq.git"
    export TRINITY_HOME="${TRINITY_PREFIX}"

    add_env TRINITY_PREFIX TRINITY_VERSION TRINITY_HOME
    prepend_path PATH "${TRINITY_PREFIX}"

    apt-get update
    apt-get install -y \
      build-essential \
      cmake \
      git \
      python \
      zlib1g-dev

    # Runtime requires
    #  python3 python3-numpy
    #  perl
    #  zlib1g
    #  java 8+
    #  Possibly some perl modules

    rm -rf /var/lib/apt/lists/*

    cd /build
    git clone "${TRINITY_URL}" trinity
    cd trinity

    git fetch --tags
    git checkout "${TRINITY_VERSION}"

    make
    make plugins

    mkdir -p "${TRINITY_PREFIX}"
    # make install just calls a python script that does this.
    rsync -av --exclude='.*' /build/trinity/* "${TRINITY_PREFIX}"


Bootstrap: docker
From: debian:stretch-20190228-slim
Stage: star_builder

%files from init
    /build/init.sh

%post
    set -eux

    . /build/init.sh
    export STAR_VERSION="2.7.1a"
    export STAR_PREFIX="/opt/star/${STAR_VERSION}"
    export STAR_URL="https://github.com/alexdobin/STAR/archive/${STAR_VERSION}.tar.gz"

    add_env STAR_PREFIX STAR_VERSION
    prepend_path PATH "${STAR_PREFIX}/bin"

    apt-get update
    apt-get install -y \
      build-essential \
      wget \
      zlib1g-dev

    # Runtime requires
    #  libgomp1
    #  zlib1g-dev

    rm -rf /var/lib/apt/lists/*

    cd /build
    wget -O star.tar.gz "${STAR_URL}"
    tar -zxf star.tar.gz
    cd STAR*/source

    # See if we can provide this as a build time-option?
    # STAR already seems to required x86-64 instructions, so i think current settings are safe.
    make LDFLAGSextra=-flto CXXFLAGSextra="-flto -march=x86-64 -mtune=native" STAR
    make LDFLAGSextra=-flto CXXFLAGSextra="-flto -march=x86-64 -mtune=native" STARlong

    mkdir -p "${STAR_PREFIX}/bin"
    cp -r ../bin/Linux_x86_64/STAR* "${STAR_PREFIX}/bin"


Bootstrap: docker
From: debian:stretch-20190228-slim
Stage: stringtie_builder

%files from init
    /build/init.sh

%post
    set -eux

    . /build/init.sh
    export STRINGTIE_VERSION="1.3.6"
    export STRINGTIE_PREFIX="/opt/stringtie/${STRINGTIE_VERSION}"
    export STRINGTIE_URL="http://ccb.jhu.edu/software/stringtie/dl/stringtie-${STRINGTIE_VERSION}.tar.gz"

    add_env STRINGTIE_PREFIX STRINGTIE_VERSION
    prepend_path PATH "${STRINGTIE_PREFIX}/bin"

    apt-get update
    apt-get install -y \
      build-essential \
      wget \
      zlib1g-dev


    # Runtime requires
    #  zlib1g-dev

    rm -rf /var/lib/apt/lists/*

    cd /build
    wget -O stringtie.tar.gz "${STRINGTIE_URL}"
    tar -zxf stringtie.tar.gz
    cd stringtie*

    make release
    mkdir -p "${STRINGTIE_PREFIX}/bin"
    cp -r stringtie "${STRINGTIE_PREFIX}/bin"


Bootstrap: docker
From: debian:stretch-20190228-slim
Stage: final

%labels
    Author "darcy.ab.jones@gmail.com"
    Version "v0.0.1"

%help
    This is some help text

%test
    echo "Can add tests here"

%files from jellyfish_builder
    /opt/jellyfish
    /build/env.sh /build/jellyfish_builder.sh

%files from bowtie2_builder
    /opt/bowtie2
    /build/env.sh /build/bowtie2_builder.sh

%files from salmon_builder
    /opt/salmon
    /build/env.sh /build/salmon_builder.sh

%files from htslib_builder
    /opt/htslib
    /opt/samtools
    /build/env.sh /build/htslib_builder.sh

%files from trinity_builder
    /opt/trinity
    /build/env.sh /build/trinity_builder.sh

%files from star_builder
    /opt/star
    /build/env.sh /build/star_builder.sh

%files from stringtie_builder
    /opt/stringtie
    /build/env.sh /build/stringtie_builder.sh

%post
    set -eu

    cat /build/*.sh >> ${SINGULARITY_ENVIRONMENT}
    export DEBIAN_FRONTEND=noninteractive

    # This prevents java install from panicking
    mkdir -p /usr/share/man/man1

    apt-get update
    apt-get install -y --no-install-recommends \
      default-jre-headless \
      libbz2-1.0 \
      libcurl3 \
      libgomp1 \
      liblzma5 \
      libncurses5 \
      libtbb2 \
      locales \
      lzma \
      perl \
      python python-numpy \
      python3 python3-numpy \
      zlib1g

    rm -rf /var/lib/apt/lists/*

    # Set locales for perl
    sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
    dpkg-reconfigure --frontend=noninteractive locales
    update-locale LANG=en_US.UTF-8

    echo 'export LANG="en_US.UTF-8"' >> ${SINGULARITY_ENVIRONMENT}
    export LANG="en_US.UTF-8"
